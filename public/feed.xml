<?xml version="1.0" encoding="utf-8"?><rss version="2.0"><channel><title>Anonymous IPFS Blog</title><link>https://Anonymous.github.io/kpgb</link><description>A decentralized blog powered by IPFS</description><item><title>NautilusTrader 完整快速入门指南</title><link>https://Anonymous.github.io/kpgb/posts/nautilustrader.html</link><description><![CDATA[<h1>NautilusTrader 完整快速入门指南</h1>
<p>NautilusTrader 是一个高性能的开源交易平台，本文将提供一个包含数据获取的完整入门指南。</p>
<h2>前置要求</h2>
<ul>
<li>Python 3.11 或更高版本</li>
<li>稳定的网络连接（用于下载数据）</li>
</ul>
<h2>安装步骤</h2>
<h3>1. 安装 NautilusTrader</h3>
<pre><code class="language-bash"># 创建虚拟环境（推荐）
python -m venv nautilus_env
source nautilus_env/bin/activate  # Linux/Mac
# nautilus_env\Scripts\activate  # Windows

# 安装 NautilusTrader
pip install -U nautilus_trader

# 安装 JupyterLab（可选，用于交互式开发）
pip install -U jupyterlab
</code></pre>
<h3>2. 获取示例数据（重要！）</h3>
<p>官方提供了一个便捷的脚本来下载示例数据：</p>
<pre><code class="language-python"># 在 Jupyter notebook 或 Python 脚本中运行
import subprocess
import sys

# 如果在 Colab 或需要安装 curl
# !apt-get update &amp;&amp; apt-get install curl -y

# 下载并执行数据准备脚本
subprocess.run([
    sys.executable, 
    "-c", 
    "import urllib.request; exec(urllib.request.urlopen('https://raw.githubusercontent.com/nautechsystems/nautilus_data/main/nautilus_data/hist_data_to_catalog.py').read())"
])
</code></pre>
<p>或者使用命令行：</p>
<pre><code class="language-bash">curl https://raw.githubusercontent.com/nautechsystems/nautilus_data/main/nautilus_data/hist_data_to_catalog.py | python -
</code></pre>
<p>这个脚本会：</p>
<ul>
<li>下载 EUR/USD 的历史数据</li>
<li>将数据转换为 Parquet 格式</li>
<li>创建数据目录结构</li>
</ul>
<h2>完整的回测示例</h2>
<h3>1. 导入必要的模块</h3>
<pre><code class="language-python">from decimal import Decimal
from pathlib import Path

import pandas as pd
from nautilus_trader.backtest.node import BacktestNode
from nautilus_trader.config import BacktestRunConfig, BacktestVenueConfig, BacktestDataConfig, BacktestEngineConfig
from nautilus_trader.config import ImportableStrategyConfig
from nautilus_trader.config import LoggingConfig
from nautilus_trader.core.datetime import dt_to_unix_nanos
from nautilus_trader.model.data import QuoteTick
from nautilus_trader.model.identifiers import InstrumentId, Symbol, Venue
from nautilus_trader.model.objects import Price, Quantity
from nautilus_trader.persistence.catalog.parquet import ParquetDataCatalog
from nautilus_trader.trading.strategy import Strategy
</code></pre>
<h3>2. 设置数据目录</h3>
<pre><code class="language-python"># 设置数据目录路径
from nautilus_trader.persistence.catalog import ParquetDataCatalog

# 从环境变量或默认路径创建数据目录
catalog = ParquetDataCatalog.from_env()

# 查看可用的交易工具
instruments = catalog.instruments()
print(f"可用交易工具: {[str(i.id) for i in instruments]}")

# 查看数据时间范围
start = catalog.min_timestamp("quote_tick", instrument_id="EUR/USD.SIM")
end = catalog.max_timestamp("quote_tick", instrument_id="EUR/USD.SIM")
print(f"数据时间范围: {start} 到 {end}")
</code></pre>
<h3>3. 创建简单的 MACD 策略</h3>
<pre><code class="language-python">from nautilus_trader.indicators.macd import MovingAverageConvergenceDivergence
from nautilus_trader.trading.strategy import Strategy

class MACDStrategy(Strategy):
    def __init__(self, config: dict):
        super().__init__(config)
        self.instrument_id = InstrumentId.from_str(config["instrument_id"])
        
        # MACD 参数
        self.fast_period = config.get("fast_period", 12)
        self.slow_period = config.get("slow_period", 26)
        self.signal_period = config.get("signal_period", 9)
        
        # 交易参数
        self.trade_size = Decimal(config.get("trade_size", "1.0"))
        self.entry_threshold = config.get("entry_threshold", 0.0)
        
        # 指标
        self.macd = None
        
    def on_start(self):
        """策略启动时调用"""
        self.macd = MovingAverageConvergenceDivergence(
            fast_period=self.fast_period,
            slow_period=self.slow_period,
            signal_period=self.signal_period,
        )
        
        # 订阅报价数据
        self.subscribe_quote_ticks(self.instrument_id)
        
    def on_quote_tick(self, tick: QuoteTick):
        """接收到报价时调用"""
        # 更新 MACD
        price = float(tick.bid_price)
        self.macd.update_raw(price)
        
        if not self.macd.initialized:
            return
            
        # 获取 MACD 值
        macd_line = self.macd.line
        signal_line = self.macd.signal
        
        # 检查持仓
        position = self.cache.position(self.instrument_id)
        
        # 交易逻辑
        if position is None:
            # 无持仓时的入场逻辑
            if macd_line &gt; self.entry_threshold and macd_line &gt; signal_line:
                # MACD 在阈值之上且高于信号线，做多
                self.buy(size=self.trade_size)
            elif macd_line &lt; -self.entry_threshold and macd_line &lt; signal_line:
                # MACD 在阈值之下且低于信号线，做空
                self.sell(size=self.trade_size)
        else:
            # 有持仓时的出场逻辑
            if position.is_long and macd_line &lt;= 0:
                # 多仓且 MACD 跌破零线，平仓
                self.close_position(position)
            elif position.is_short and macd_line &gt;= 0:
                # 空仓且 MACD 升破零线，平仓
                self.close_position(position)
                
    def buy(self, size: Decimal):
        """发送买入订单"""
        order = self.order_factory.market(
            instrument_id=self.instrument_id,
            order_side="BUY",
            quantity=Quantity.from_str(str(size)),
        )
        self.submit_order(order)
        
    def sell(self, size: Decimal):
        """发送卖出订单"""
        order = self.order_factory.market(
            instrument_id=self.instrument_id,
            order_side="SELL",
            quantity=Quantity.from_str(str(size)),
        )
        self.submit_order(order)
        
    def close_position(self, position):
        """平仓"""
        order = self.order_factory.market(
            instrument_id=self.instrument_id,
            order_side="SELL" if position.is_long else "BUY",
            quantity=position.quantity,
        )
        self.submit_order(order)
</code></pre>
<h3>4. 配置并运行回测</h3>
<pre><code class="language-python"># 配置回测
config = BacktestRunConfig(
    engine=BacktestEngineConfig(
        strategies=[
            ImportableStrategyConfig(
                strategy_path="__main__:MACDStrategy",
                config={
                    "instrument_id": "EUR/USD.SIM",
                    "fast_period": 12,
                    "slow_period": 26,
                    "signal_period": 9,
                    "trade_size": "100000",  # 1标准手
                    "entry_threshold": 0.0001,
                },
            ),
        ],
        logging=LoggingConfig(log_level="INFO"),
    ),
    venues=[
        BacktestVenueConfig(
            name="SIM",
            oms_type="NETTING",
            account_type="MARGIN",
            base_currency="USD",
            starting_balances=["100000 USD"],
        ),
    ],
    data=[
        BacktestDataConfig(
            catalog_path=str(catalog.path),
            data_cls="nautilus_trader.model.data:QuoteTick",
            instrument_id="EUR/USD.SIM",
            start_time="2020-01-01T00:00:00Z",
            end_time="2020-01-31T23:59:59Z",
        ),
    ],
)

# 创建并运行回测节点
node = BacktestNode(configs=[config])
results = node.run()
</code></pre>
<h3>5. 分析回测结果</h3>
<pre><code class="language-python"># 获取引擎实例
engine = node.engine

# 生成报告
print("=== 订单成交报告 ===")
engine.trader.generate_order_fills_report()

print("\n=== 持仓报告 ===")
engine.trader.generate_positions_report()

print("\n=== 账户报告 ===")
engine.trader.generate_account_report(Venue("SIM"))

# 获取账户统计
account = engine.trader.accounts()[0]
print(f"\n初始余额: {account.starting_balances()}")
print(f"最终余额: {account.balances()}")

# 计算收益
starting_balance = 100000
final_balance = float(str(account.balance(USD).split()[0]))
pnl = final_balance - starting_balance
return_pct = (pnl / starting_balance) * 100

print(f"盈亏: ${pnl:.2f}")
print(f"收益率: {return_pct:.2f}%")
</code></pre>
<h2>数据获取的其他方式</h2>
<h3>1. 使用自己的数据</h3>
<p>如果你有自己的数据，可以将其转换为 NautilusTrader 格式：</p>
<pre><code class="language-python"># 从 CSV 导入数据
from nautilus_trader.persistence.loaders import CSVTickDataLoader

loader = CSVTickDataLoader(
    instrument_id="EUR/USD.SIM",
    price_precision=5,
    size_precision=0,
)

# 加载数据
ticks = loader.load("path/to/your/data.csv")

# 保存到 catalog
catalog.write_data(ticks)
</code></pre>
<h3>2. 从交易所获取实时数据</h3>
<pre><code class="language-python"># 以 Binance 为例
from nautilus_trader.adapters.binance.config import BinanceDataClientConfig
from nautilus_trader.adapters.binance.factories import BinanceLiveDataClientFactory

# 配置数据客户端
config = BinanceDataClientConfig(
    api_key="your_api_key",  # 可选
    api_secret="your_api_secret",  # 可选
    testnet=False,
)

# 创建数据客户端
data_client = BinanceLiveDataClientFactory.create(
    loop=asyncio.get_event_loop(),
    name="BINANCE",
    config=config,
)
</code></pre>
<h2>注意事项</h2>
<ol>
<li><strong>数据质量</strong>：回测结果的准确性依赖于数据质量</li>
<li><strong>滑点和手续费</strong>：记得在回测配置中设置现实的滑点和手续费</li>
<li><strong>过度拟合</strong>：避免过度优化策略参数</li>
<li><strong>样本外测试</strong>：使用未参与优化的数据进行验证</li>
</ol>
<h2>下一步</h2>
<ol>
<li>尝试修改 MACD 策略参数</li>
<li>实现其他技术指标策略</li>
<li>添加风险管理（止损、止盈）</li>
<li>尝试多品种交易</li>
<li>连接实盘交易</li>
</ol>
<h2>资源链接</h2>
<ul>
<li><a href="https://nautilustrader.io/docs/">官方文档</a></li>
<li><a href="https://github.com/nautechsystems/nautilus_trader">GitHub 仓库</a></li>
<li><a href="https://github.com/nautechsystems/nautilus_trader/tree/master/examples">示例策略</a></li>
<li><a href="https://discord.gg/AUWEAMZk">社区论坛</a></li>
</ul>
<p>现在你已经掌握了 NautilusTrader 的完整入门流程，包括最重要的数据获取步骤！</p>
]]></description><author>Developer</author><guid isPermaLink="false">b08fe97d1bb5febcc841d7a9a7368b8ab464022089ed03893dbba133154ee448</guid><pubDate>Mon, 21 Jul 2025 13:31:00 +0000</pubDate></item><item><title>How to build an agent</title><link>https://Anonymous.github.io/kpgb/posts/how-to-build-an-agent.html</link><description><![CDATA[<h1>如何构建一个代理程序</h1>
<h2>或者：皇帝的新衣</h2>
<p><strong>Thorsten Ball，2025年4月15日</strong></p>
<p>构建一个功能完整的代码编辑代理程序其实并不难。</p>
<p>看起来应该很难。当你看到一个代理程序在编辑文件、运行命令、从错误中脱身、尝试不同策略时——似乎背后一定有什么秘密。</p>
<p>但其实没有。它就是一个LLM、一个循环，以及足够的token。这就是我们在<a href="/podcast">播客</a>中从一开始就在说的。其余的，那些让Amp如此令人上瘾和印象深刻的东西？都是苦工。</p>
<p>但是构建一个小巧而又令人印象深刻的代理程序甚至不需要那些。你可以用不到400行代码完成，其中大部分还是样板代码。</p>
<p>我现在就要向你展示如何做到这一点。我们将一起编写一些代码，从零行代码开始，到“哇，这是…游戏改变者“。</p>
<p>我强烈建议你跟着做。不，真的。你可能会觉得只是读一遍就够了，不用真的敲代码，但这不到400行代码。我需要你感受一下代码量有多少，我希望你在自己的终端、自己的文件夹里亲眼看到这一切。</p>
<p>我们需要的东西：</p>
<ul>
<li><a href="https://go.dev/">Go</a></li>
<li><a href="https://console.anthropic.com/settings/keys">Anthropic API密钥</a>，设置为环境变量<code>ANTHROPIC_API_KEY</code></li>
</ul>
<p>准备好铅笔！</p>
<p>让我们直接开始，用四个简单命令建立一个新的Go项目：</p>
<pre><code class="language-bash">mkdir code-editing-agent
cd code-editing-agent
go mod init agent
touch main.go
</code></pre>
<p>现在，让我们打开<code>main.go</code>，作为第一步，放入我们需要的基本框架：</p>
<pre><code class="language-go">package main

import (
    "bufio"
    "context"
    "fmt"
    "os"
    "github.com/anthropics/anthropic-sdk-go"
)

func main() {
    client := anthropic.NewClient()
    scanner := bufio.NewScanner(os.Stdin)

    getUserMessage := func() (string, bool) {
        if !scanner.Scan() {
            return "", false
        }
        return scanner.Text(), true
    }

    agent := NewAgent(&amp;client, getUserMessage)
    err := agent.Run(context.TODO())
    if err != nil {
        fmt.Printf("Error: %s\n", err.Error())
    }
}

func NewAgent(client *anthropic.Client, getUserMessage func() (string, bool)) *Agent {
    return &amp;Agent{
        client: client,
        getUserMessage: getUserMessage,
    }
}

type Agent struct {
    client *anthropic.Client
    getUserMessage func() (string, bool)
}
</code></pre>
<p>是的，这还不能编译。但我们这里有的是一个<code>Agent</code>，它可以访问<code>anthropic.Client</code>（默认情况下会寻找<code>ANTHROPIC_API_KEY</code>），并且可以通过从终端的stdin读取来获取用户消息。</p>
<p>现在让我们添加缺失的<code>Run()</code>方法：</p>
<pre><code class="language-go">// main.go
func (a *Agent) Run(ctx context.Context) error {
    conversation := []anthropic.MessageParam{}
    fmt.Println("与Claude聊天（使用'ctrl-c'退出）")

    for {
        fmt.Print("\u001b[94m你\u001b[0m: ")
        userInput, ok := a.getUserMessage()
        if !ok {
            break
        }

        userMessage := anthropic.NewUserMessage(anthropic.NewTextBlock(userInput))
        conversation = append(conversation, userMessage)

        message, err := a.runInference(ctx, conversation)
        if err != nil {
            return err
        }

        conversation = append(conversation, message.ToParam())

        for _, content := range message.Content {
            switch content.Type {
            case "text":
                fmt.Printf("\u001b[93mClaude\u001b[0m: %s\n", content.Text)
            }
        }
    }

    return nil
}

func (a *Agent) runInference(ctx context.Context, conversation []anthropic.MessageParam) (*anthropic.Message, error) {
    message, err := a.client.Messages.New(ctx, anthropic.MessageNewParams{
        Model: anthropic.ModelClaude3_7SonnetLatest,
        MaxTokens: int64(1024),
        Messages: conversation,
    })
    return message, err
}
</code></pre>
<p>代码不多，对吧？90行，其中最重要的是<code>Run()</code>中的这个循环，让我们可以与Claude对话。但这已经是这个程序的心跳了。</p>
<p>对于一个心跳来说，它非常直接：我们首先打印一个提示，要求用户输入内容，将其添加到对话中，发送给Claude，将Claude的响应添加到对话中，打印响应，然后循环继续。</p>
<p>这就是你使用过的每一个AI聊天应用程序，只不过是在终端中。</p>
<p>让我们运行它：</p>
<pre><code class="language-bash">export ANTHROPIC_API_KEY="这是我最后一次告诉你要设置这个"
# 下载依赖
go mod tidy
# 运行
go run main.go
</code></pre>
<p>然后你就可以和Claude聊天了，像这样：</p>
<p>注意我们如何在多轮对话中保持同一个对话。它记住了我在第一条消息中的名字。<code>conversation</code>在每一轮中都会变长，我们每次都发送整个对话。服务器——Anthropic的服务器——是无状态的。它只能看到<code>conversation</code>切片中的内容。维护状态是我们的责任。</p>
<p>好的，让我们继续，因为昵称很糟糕，而且这还不是一个代理程序。什么是代理程序？这是<a href="https://youtu.be/J1-W9O3n7j8?t=72">我的定义</a>：一个可以访问工具的LLM，让它具有修改上下文窗口之外内容的能力。</p>
<h2>第一个工具</h2>
<p>具有工具访问权限的LLM？什么是工具？基本思想是这样的：你向模型发送一个提示，说如果它想使用“工具“，应该以某种特定方式回复。然后你，作为消息的接收者，通过执行工具来“使用工具“并回复结果。就是这样。我们将看到的其他一切都只是在此基础上的抽象。</p>
<p>想象你正在和朋友交谈，你告诉他们：“在接下来的对话中，如果你想让我举起手臂，就眨眼睛”。说出来很奇怪，但这是一个容易理解的概念。</p>
<p>我们已经可以在不改变任何代码的情况下尝试它了。</p>
<p>我们告诉Claude，当它想了解天气时，用<code>get_weather</code>眨眼。下一步是举起我们的手臂并回复“工具的结果“：</p>
<p>这在第一次尝试时就运行得很好，不是吗？</p>
<p>这些模型经过训练和微调来使用“工具“，它们非常渴望这样做。到2025年，它们基本上“知道“自己不是无所不知的，可以使用工具来获取更多信息。（当然这并不是实际发生的情况，但现在这是一个足够好的解释。）</p>
<p>总结一下，工具和工具使用只有两个要素：</p>
<ol>
<li>你告诉模型有哪些工具可用</li>
<li>当模型想要执行工具时，它告诉你，你执行工具并发送响应</li>
</ol>
<p>为了使(1)更容易，大型模型提供商构建了内置API来发送工具定义。</p>
<p>好的，现在让我们构建我们的第一个工具：<code>read_file</code></p>
<h2><code>read_file</code>工具</h2>
<p>为了定义<code>read_file</code>工具，我们将使用Anthropic SDK建议的类型，但请记住：在底层，这都将作为字符串发送给模型。这都是“如果你想让我使用<code>read_file</code>就眨眼“。</p>
<p>我们要添加的每个工具都需要以下内容：</p>
<ul>
<li>一个名称</li>
<li>一个描述，告诉模型工具的作用、何时使用、何时不使用、返回什么等等</li>
<li>一个输入模式，作为JSON模式描述，说明这个工具期望什么输入以及以什么形式</li>
<li>一个实际执行工具的函数，使用模型发送给我们的输入并返回结果</li>
</ul>
<p>所以让我们将其添加到我们的代码中：</p>
<pre><code class="language-go">// main.go
type ToolDefinition struct {
    Name string `json:"name"`
    Description string `json:"description"`
    InputSchema anthropic.ToolInputSchemaParam `json:"input_schema"`
    Function func(input json.RawMessage) (string, error)
}
</code></pre>
<p>现在我们给我们的<code>Agent</code>工具定义：</p>
<pre><code class="language-go">// main.go
// `tools`在这里添加：
type Agent struct {
    client *anthropic.Client
    getUserMessage func() (string, bool)
    tools []ToolDefinition
}

// 在这里：
func NewAgent(
    client *anthropic.Client,
    getUserMessage func() (string, bool),
    tools []ToolDefinition,
) *Agent {
    return &amp;Agent{
        client: client,
        getUserMessage: getUserMessage,
        tools: tools,
    }
}

// 在这里：
func main() {
    // [... 之前的代码 ...]
    tools := []ToolDefinition{}
    agent := NewAgent(&amp;client, getUserMessage, tools)
    // [... 之前的代码 ...]
}
</code></pre>
<p>并在<code>runInference</code>中将它们发送给模型：</p>
<pre><code class="language-go">// main.go
func (a *Agent) runInference(ctx context.Context, conversation []anthropic.MessageParam) (*anthropic.Message, error) {
    anthropicTools := []anthropic.ToolUnionParam{}
    for _, tool := range a.tools {
        anthropicTools = append(anthropicTools, anthropic.ToolUnionParam{
            OfTool: &amp;anthropic.ToolParam{
                Name: tool.Name,
                Description: anthropic.String(tool.Description),
                InputSchema: tool.InputSchema,
            },
        })
    }

    message, err := a.client.Messages.New(ctx, anthropic.MessageNewParams{
        Model: anthropic.ModelClaude3_7SonnetLatest,
        MaxTokens: int64(1024),
        Messages: conversation,
        Tools: anthropicTools,
    })
    return message, err
}
</code></pre>
<p>这里有一些类型操作，我在Go泛型方面还不够熟练，所以我不会试图向你解释<code>anthropic.String</code>和<code>ToolUnionParam</code>。但是，真的，我发誓，这很简单：</p>
<p>我们发送我们的工具定义，在服务器上，Anthropic然后将这些定义包装在<a href="https://docs.anthropic.com/en/docs/build-with-claude/tool-use/overview#tool-use-system-prompt">这个系统提示</a>中（内容不多），将其添加到我们的<code>conversation</code>中，然后如果模型想使用该工具，就会以特定方式回复。</p>
<p>好的，工具定义正在发送，但我们还没有定义工具。让我们来做这件事并定义<code>read_file</code>：</p>
<pre><code class="language-go">// main.go
var ReadFileDefinition = ToolDefinition{
    Name: "read_file",
    Description: "读取给定相对文件路径的内容。当你想看到文件内部的内容时使用这个。不要对目录名使用这个。",
    InputSchema: ReadFileInputSchema,
    Function: ReadFile,
}

type ReadFileInput struct {
    Path string `json:"path" jsonschema_description:"工作目录中文件的相对路径。"`
}

var ReadFileInputSchema = GenerateSchema[ReadFileInput]()

func ReadFile(input json.RawMessage) (string, error) {
    readFileInput := ReadFileInput{}
    err := json.Unmarshal(input, &amp;readFileInput)
    if err != nil {
        panic(err)
    }

    content, err := os.ReadFile(readFileInput.Path)
    if err != nil {
        return "", err
    }

    return string(content), nil
}

func GenerateSchema[T any]() anthropic.ToolInputSchemaParam {
    reflector := jsonschema.Reflector{
        AllowAdditionalProperties: false,
        DoNotReference: true,
    }
    var v T
    schema := reflector.Reflect(v)
    return anthropic.ToolInputSchemaParam{
        Properties: schema.Properties,
    }
}
</code></pre>
<p>代码不多，对吧？这是一个单一函数<code>ReadFile</code>，以及模型将看到的两个描述：我们的<code>Description</code>描述工具本身（“读取给定相对文件路径的内容…”），以及这个工具唯一输入参数的描述（“工作目录中文件的相对路径…”）。</p>
<p><code>ReadFileInputSchema</code>和<code>GenerateSchema</code>这些东西？我们需要这些，这样我们就可以为我们发送给模型的工具定义生成JSON模式。为此，我们使用<code>jsonschema</code>包，我们需要导入和下载：</p>
<pre><code class="language-go">// main.go
package main

import (
    "bufio"
    "context"
    // 添加这个：
    "encoding/json"
    "fmt"
    "os"
    "github.com/anthropics/anthropic-sdk-go"
    // 添加这个：
    "github.com/invopop/jsonschema"
)
</code></pre>
<p>然后运行以下命令：</p>
<pre><code class="language-bash">go mod tidy
</code></pre>
<p>然后，在<code>main</code>函数中，我们需要确保使用定义：</p>
<pre><code class="language-go">func main() {
    // [... 之前的代码 ...]
    tools := []ToolDefinition{ReadFileDefinition}
    // [... 之前的代码 ...]
}
</code></pre>
<p>是时候试试了！</p>
<p>等等，什么？哈哈哈，它想使用工具！显然你的输出会略有不同，但Claude肯定听起来知道它可以读取文件，对吧？</p>
<p>问题是我们没有监听！当Claude眨眼时，我们忽略了它。我们需要修复这个问题。</p>
<p>在这里，让我展示如何通过用以下内容替换我们<code>Agent</code>的<code>Run</code>方法来做到这一点：</p>
<pre><code class="language-go">// main.go
func (a *Agent) Run(ctx context.Context) error {
    conversation := []anthropic.MessageParam{}
    fmt.Println("与Claude聊天（使用'ctrl-c'退出）")
    readUserInput := true

    for {
        if readUserInput {
            fmt.Print("\u001b[94m你\u001b[0m: ")
            userInput, ok := a.getUserMessage()
            if !ok {
                break
            }
            userMessage := anthropic.NewUserMessage(anthropic.NewTextBlock(userInput))
            conversation = append(conversation, userMessage)
        }

        message, err := a.runInference(ctx, conversation)
        if err != nil {
            return err
        }

        conversation = append(conversation, message.ToParam())

        toolResults := []anthropic.ContentBlockParamUnion{}
        for _, content := range message.Content {
            switch content.Type {
            case "text":
                fmt.Printf("\u001b[93mClaude\u001b[0m: %s\n", content.Text)
            case "tool_use":
                result := a.executeTool(content.ID, content.Name, content.Input)
                toolResults = append(toolResults, result)
            }
        }

        if len(toolResults) == 0 {
            readUserInput = true
            continue
        }

        readUserInput = false
        conversation = append(conversation, anthropic.NewUserMessage(toolResults...))
    }

    return nil
}

func (a *Agent) executeTool(id, name string, input json.RawMessage) anthropic.ContentBlockParamUnion {
    var toolDef ToolDefinition
    var found bool
    for _, tool := range a.tools {
        if tool.Name == name {
            toolDef = tool
            found = true
            break
        }
    }

    if !found {
        return anthropic.NewToolResultBlock(id, "tool not found", true)
    }

    fmt.Printf("\u001b[92mtool\u001b[0m: %s(%s)\n", name, input)
    response, err := toolDef.Function(input)
    if err != nil {
        return anthropic.NewToolResultBlock(id, err.Error(), true)
    }

    return anthropic.NewToolResultBlock(id, response, false)
}
</code></pre>
<p>眯着眼看，你会发现90%是样板代码，10%是重要的：当我们从Claude那里得到一个<code>message</code>时，我们通过查找<code>content.Type == "tool_use"</code>来检查Claude是否要求我们执行工具，如果是，我们交给<code>executeTool</code>，在我们的本地注册表中按名称查找工具，解码输入，执行它，返回结果。如果是错误，我们翻转一个布尔值。就是这样。</p>
<p>（是的，循环中有循环，但这不重要。）</p>
<p>我们执行工具，将结果发送回Claude，然后再次请求Claude的响应。真的：就是这样。让我展示给你看。</p>
<p>准备工作，运行这个：</p>
<pre><code class="language-bash">echo 'what animal is the most disagreeable because it always says neigh?' &gt;&gt; secret-file.txt
</code></pre>
<p>这在我们的目录中创建了一个<code>secret-file.txt</code>，包含一个神秘的谜语。</p>
<p>在同一个目录中，让我们运行我们新的使用工具的代理程序，并要求它查看文件：</p>
<p>让我们深呼吸，一起说出来。准备好了吗？开始：太棒了。你只是给它一个工具，它就…在认为有助于解决任务时使用它。记住：我们没有说任何关于“如果用户询问文件，就读取文件“的话。我们也没有说“如果某些东西看起来像文件名，就想办法读取它“。不，这些都没有。我们说“帮我解决这个文件中的问题“，Claude意识到它可以读取文件来回答，然后就去做了。</p>
<p>当然，我们可以具体一点，真正推动它使用工具，但它基本上是自己完成的：</p>
<p>非常准确。好的，现在我们知道如何让Claude使用工具，让我们添加更多工具。</p>
<h2><code>list_files</code>工具</h2>
<p>如果你和我一样，当你登录到一台新计算机时，你做的第一件事就是通过运行<code>ls</code>来了解情况——列出文件。</p>
<p>让我们给Claude同样的能力，一个列出文件的工具。这是<code>list_files</code>工具的完整实现：</p>
<pre><code class="language-go">// main.go
var ListFilesDefinition = ToolDefinition{
    Name: "list_files",
    Description: "列出给定路径下的文件和目录。如果没有提供路径，列出当前目录中的文件。",
    InputSchema: ListFilesInputSchema,
    Function: ListFiles,
}

type ListFilesInput struct {
    Path string `json:"path,omitempty" jsonschema_description:"可选的相对路径，用于列出文件。如果不提供，默认为当前目录。"`
}

var ListFilesInputSchema = GenerateSchema[ListFilesInput]()

func ListFiles(input json.RawMessage) (string, error) {
    listFilesInput := ListFilesInput{}
    err := json.Unmarshal(input, &amp;listFilesInput)
    if err != nil {
        panic(err)
    }

    dir := "."
    if listFilesInput.Path != "" {
        dir = listFilesInput.Path
    }

    var files []string
    err = filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
        if err != nil {
            return err
        }
        relPath, err := filepath.Rel(dir, path)
        if err != nil {
            return err
        }
        if relPath != "." {
            if info.IsDir() {
                files = append(files, relPath+"/")
            } else {
                files = append(files, relPath)
            }
        }
        return nil
    })

    if err != nil {
        return "", err
    }

    result, err := json.Marshal(files)
    if err != nil {
        return "", err
    }

    return string(result), nil
}
</code></pre>
<p>这里没有什么花哨的：<code>list_files</code>返回当前文件夹中的文件和目录列表。如果这是一个严肃的努力，我们可以（并且可能应该）做一千种优化，但由于我只是想向你展示巫师帽里有什么，这就够了。</p>
<p>需要注意的一点：我们返回字符串列表，并用尾随斜杠表示目录。这不是必需的，这只是我刚刚决定要做的事情。没有固定格式。只要Claude能理解就行，至于它能否理解，你需要通过实验来确定。你也可以在每个目录前面加上“directory: “或返回一个带有两个标题的Markdown文档：“directories“和“files”。有很多选择，你选择哪一个取决于Claude最能理解什么、需要多少token、生成和读取的速度如何等等。</p>
<p>在这里，我们只想创建一个小的<code>list_files</code>工具，最简单的选择获胜。</p>
<p>当然，我们也需要告诉Claude关于<code>list_files</code>：</p>
<pre><code class="language-go">// main.go
func main() {
    // [... 之前的代码 ...]
    tools := []ToolDefinition{ReadFileDefinition, ListFilesDefinition}
    // [... 之前的代码 ...]
}
</code></pre>
<p>就是这样。让我们问Claude它能在这个目录中看到什么。</p>
<p>工作了！它可以读取目录。</p>
<p>但这里有一个重点：Claude知道如何组合这些工具。我们只需要以一种激发它的方式提示它：</p>
<p>首先它使用了<code>list_files</code>，然后它用我询问的Go相关文件两次调用了<code>read_file</code>。</p>
<p>就…就像我们会做的一样，对吧？我的意思是，在这里，如果我问你我们在这个项目中使用什么版本的Go，你会怎么做？这是Claude为我做的：</p>
<p>Claude查看目录，查看<code>go.mod</code>，然后给出答案。</p>
<p>我们现在大约有190行代码。让这个数字深入人心。一旦你感受到了，让我们添加另一个工具。</p>
<h2>让它<code>edit_file</code></h2>
<p>我们要添加的最后一个工具是<code>edit_file</code>——一个让Claude编辑文件的工具。</p>
<p>“天哪”，你现在在想，“这就是橡胶遇到路面的地方，这就是他从帽子里拉出兔子的地方。“好吧，让我们看看，好吗？</p>
<p>首先，让我们为我们新的<code>edit_file</code>工具添加一个定义：</p>
<pre><code class="language-go">// main.go
var EditFileDefinition = ToolDefinition{
    Name: "edit_file",
    Description: `对文本文件进行编辑。

在给定文件中将'old_str'替换为'new_str'。'old_str'和'new_str'必须彼此不同。
如果用path指定的文件不存在，将创建它。
`,
    InputSchema: EditFileInputSchema,
    Function: EditFile,
}

type EditFileInput struct {
    Path string `json:"path" jsonschema_description:"文件的路径"`
    OldStr string `json:"old_str" jsonschema_description:"要搜索的文本 - 必须完全匹配且只有一个完全匹配"`
    NewStr string `json:"new_str" jsonschema_description:"用来替换old_str的文本"`
}

var EditFileInputSchema = GenerateSchema[EditFileInput]()
</code></pre>
<p>没错，我又知道你在想什么：“字符串替换来编辑文件？“Claude 3.7喜欢替换字符串（通过实验你会发现它们喜欢或不喜欢什么），所以我们将通过告诉Claude它可以通过用新文本替换现有文本来编辑文件来实现<code>edit_file</code>。</p>
<p>现在这是Go中<code>EditFile</code>函数的实现：</p>
<pre><code class="language-go">func EditFile(input json.RawMessage) (string, error) {
    editFileInput := EditFileInput{}
    err := json.Unmarshal(input, &amp;editFileInput)
    if err != nil {
        return "", err
    }

    if editFileInput.Path == "" || editFileInput.OldStr == editFileInput.NewStr {
        return "", fmt.Errorf("invalid input parameters")
    }

    content, err := os.ReadFile(editFileInput.Path)
    if err != nil {
        if os.IsNotExist(err) &amp;&amp; editFileInput.OldStr == "" {
            return createNewFile(editFileInput.Path, editFileInput.NewStr)
        }
        return "", err
    }

    oldContent := string(content)
    newContent := strings.Replace(oldContent, editFileInput.OldStr, editFileInput.NewStr, -1)

    if oldContent == newContent &amp;&amp; editFileInput.OldStr != "" {
        return "", fmt.Errorf("old_str not found in file")
    }

    err = os.WriteFile(editFileInput.Path, []byte(newContent), 0644)
    if err != nil {
        return "", err
    }

    return "OK", nil
}
</code></pre>
<p>它检查输入参数，读取文件（或者如果存在就创建它），用<code>NewStr</code>替换<code>OldStr</code>。然后它将内容写回磁盘并返回“OK“。</p>
<p>仍然缺少的是<code>createNewFile</code>，这只是一个小的辅助函数，如果这不是Go的话会短70%：</p>
<pre><code class="language-go">func createNewFile(filePath, content string) (string, error) {
    dir := path.Dir(filePath)
    if dir != "." {
        err := os.MkdirAll(dir, 0755)
        if err != nil {
            return "", fmt.Errorf("failed to create directory: %w", err)
        }
    }

    err := os.WriteFile(filePath, []byte(content), 0644)
    if err != nil {
        return "", fmt.Errorf("failed to create file: %w", err)
    }

    return fmt.Sprintf("Successfully created file %s", filePath), nil
}
</code></pre>
<p>最后一步：将其添加到我们发送给Claude的工具列表中。</p>
<pre><code class="language-go">// main.go
func main() {
    // [... 之前的代码 ...]
    tools := []ToolDefinition{ReadFileDefinition, ListFilesDefinition, EditFileDefinition}
    // [... 之前的代码 ...]
}
</code></pre>
<p>然后…我们准备好了，但你准备好了吗？你准备好释放它了吗？</p>
<p>我想是的，让我们这样做。让我们告诉Claude用JavaScript创建一个新的FizzBuzz函数。</p>
<p>对吧？！这很令人印象深刻，不是吗？这是你可能想出的<code>edit_file</code>——通常是代理程序——最基本的实现。</p>
<p>但是，它有效吗？是的，它有效：</p>
<pre><code class="language-bash">$ node fizzbuzz.js
Running FizzBuzz:
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
16
[...]
</code></pre>
<p>太棒了。但是嘿，让它实际编辑一个文件而不只是创建一个。</p>
<p>当我要求“请编辑fizzbuzz.js，使其只打印到15“时，Claude的做法如下：</p>
<p>它读取文件，编辑文件以更改运行时长，然后还编辑文件以更新顶部的注释。</p>
<p>它仍然有效：</p>
<pre><code class="language-bash">$ node fizzbuzz.js
Running FizzBuzz:
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
</code></pre>
<p>好的，让我们再做一个，让它做以下事情：</p>
<p>创建一个congrats.js脚本，rot13解码以下字符串’Pbatenghyngvbaf ba ohvyqvat n pbqr-rqvgvat ntrag!’并打印它</p>
<p>也许是一个很高的要求。让我们看看：</p>
<p>它有效吗？让我们试试：</p>
<pre><code class="language-bash">$ node congrats.js
Congratulations on building a code-editing agent!
</code></pre>
<p>它有效！</p>
<p>这不是很神奇吗？</p>
<p>如果你和我在过去几个月中交谈过的所有工程师一样，在阅读这篇文章时，你很可能一直在等待兔子从帽子里被拉出来，等待我说“好吧，实际上这比这难得多得多。“但它不是。</p>
<p>这本质上就是代码编辑代理程序内部循环的全部内容。当然，将其集成到你的编辑器中，调整系统提示，在适当的时间给它适当的反馈，围绕它的漂亮UI，围绕工具的更好工具，对多个代理程序的支持等等——我们在Amp中构建了所有这些，但它不需要天才的时刻。所需要的只是实用的工程和苦工。</p>
<p>这些模型现在非常强大。300行代码和三个工具，现在你可以与编辑你代码的外星智能对话。如果你认为“好吧，但我们没有真正…“——去试试吧！去看看你能用这个走多远。我打赌比你想象的要远得多。</p>
<p>这就是为什么我们认为一切都在改变。</p>
]]></description><author>DaviRain-Su</author><guid isPermaLink="false">QmZx8psFhFU9imDvGaMJTfMiiDoWohBEdVYwSvNhQqDHDW</guid><pubDate>Mon, 21 Jul 2025 10:16:15 +0000</pubDate></item><item><title>Auto Excerpt Test</title><link>https://Anonymous.github.io/kpgb/posts/auto-excerpt-test.html</link><description><![CDATA[<h1>Introduction to Auto Excerpts</h1>
<p>This post demonstrates the new automatic excerpt generation feature in KPGB. The excerpt should be generated from the first paragraph of the content, stripping markdown formatting while preserving readability.</p>
<h2>How It Works</h2>
<p>The system now automatically generates excerpts when:</p>
<ol>
<li>No excerpt is provided in the frontmatter</li>
<li>The content needs to be summarized for list views</li>
<li>Clean, readable text is needed without HTML</li>
</ol>
<h3>Technical Details</h3>
<p>The excerpt generator uses <strong>pulldown-cmark</strong> to parse markdown and extract plain text. It handles:</p>
<ul>
<li><strong>Bold</strong> and <em>italic</em> text</li>
<li>Lists and nested structures</li>
<li>Code blocks (which are excluded from excerpts)</li>
<li>Links and other formatting</li>
</ul>
<pre><code class="language-rust">// This code block won't appear in the excerpt
fn generate_excerpt(markdown: &amp;str) -&gt; String {
    // Implementation details...
}
</code></pre>
<h2>Benefits</h2>
<p>The automatic excerpt generation provides several benefits:</p>
<ul>
<li>Consistent formatting across all posts</li>
<li>Better readability in list views</li>
<li>Reduced manual work for authors</li>
<li>SEO-friendly summaries</li>
</ul>
<p>This feature enhances the overall user experience by providing clear, concise previews of each post without requiring authors to manually write excerpts.</p>
]]></description><author>Developer</author><guid isPermaLink="false">Qmf29xVBTuy2eUFHHtZQecxBdQDNxLEkWZeQULFS9QArst</guid><pubDate>Mon, 21 Jul 2025 08:45:31 +0000</pubDate></item><item><title>Pagination Test Post 3</title><link>https://Anonymous.github.io/kpgb/posts/pagination-test-post-3.html</link><description><![CDATA[<h1>Pagination Test Post 3</h1>
<p>This is test post 3 for testing pagination functionality.</p>
<p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</p>
]]></description><author>Developer</author><guid isPermaLink="false">QmVY3Aqhj94jdJLj4ituS8yNZ6WSx4hoA4NRpmivGeVx6w</guid><pubDate>Mon, 21 Jul 2025 07:49:08 +0000</pubDate></item><item><title>Pagination Test Post 2</title><link>https://Anonymous.github.io/kpgb/posts/pagination-test-post-2.html</link><description><![CDATA[<h1>Pagination Test Post 2</h1>
<p>This is test post 2 for testing pagination functionality.</p>
<p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
]]></description><author>Developer</author><guid isPermaLink="false">QmfMbK2SSPchbyhHz5pPYbdJZXgZJrkUpsE4ysEymDbruo</guid><pubDate>Mon, 21 Jul 2025 07:49:07 +0000</pubDate></item><item><title>Pagination Test Post 1</title><link>https://Anonymous.github.io/kpgb/posts/pagination-test-post-1.html</link><description><![CDATA[<h1>Pagination Test Post 1</h1>
<p>This is test post 1 for testing pagination functionality.</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
]]></description><author>Developer</author><guid isPermaLink="false">QmWU4cL9EKYxzt5ds8uWsFS2btzRZ8GtE5SN5Q9GauktJe</guid><pubDate>Mon, 21 Jul 2025 07:49:05 +0000</pubDate></item><item><title>Tag System Demo Post</title><link>https://Anonymous.github.io/kpgb/posts/tag-system-demo-post.html</link><description><![CDATA[<h1>Tag System Demo Post</h1>
<p>This post demonstrates the new tag system implementation in KPGB.</p>
<h2>Features Added</h2>
<p>The tag system now includes:</p>
<ol>
<li><strong>Tag Browsing</strong>: Click on any tag to see all posts with that tag</li>
<li><strong>Tag Cloud</strong>: A dedicated tags page showing all tags with post counts</li>
<li><strong>API Support</strong>: New endpoints for tag-related queries</li>
<li><strong>Static Generation</strong>: Tag pages are generated for static sites</li>
<li><strong>Clean URLs</strong>: Tag pages use clean URL structure</li>
</ol>
<h2>Technical Implementation</h2>
<ul>
<li>Database layer: Tag queries with post counts</li>
<li>API endpoints: <code>/api/tags</code> and <code>/api/tags/:tag</code></li>
<li>Web handlers: Tag listing and filtered post views</li>
<li>Templates: New tag cloud and tag posts pages</li>
<li>CSS styling: Enhanced tag presentation</li>
</ul>
<p>Try clicking on the tags below to explore posts by topic!</p>
]]></description><author>Developer</author><guid isPermaLink="false">QmfTnU8jYJTL2da8YDQjSX9iJYE3LEQNtnRzDAwJaTPtWC</guid><pubDate>Mon, 21 Jul 2025 07:05:24 +0000</pubDate></item><item><title>静态网站生成器完成</title><link>https://Anonymous.github.io/kpgb/posts/静态网站生成器完成.html</link><description><![CDATA[<h1>静态网站生成器完成！</h1>
<p>今天我们成功实现了KPGB的静态网站生成功能。</p>
<h2>新增功能</h2>
<h3>1. 模板引擎</h3>
<ul>
<li>使用Tera作为模板引擎</li>
<li>支持继承和包含</li>
<li>灵活的模板系统</li>
</ul>
<h3>2. 静态网站生成</h3>
<ul>
<li>自动生成HTML文件</li>
<li>响应式设计</li>
<li>美观的CSS样式</li>
</ul>
<h3>3. RSS订阅</h3>
<ul>
<li>标准RSS 2.0格式</li>
<li>自动更新</li>
<li>包含完整文章内容</li>
</ul>
<h3>4. 站点配置</h3>
<ul>
<li><code>site.toml</code>配置文件</li>
<li>自定义标题、描述、作者</li>
<li>IPFS网关配置</li>
</ul>
<h2>使用方法</h2>
<pre><code class="language-bash"># 初始化配置
cargo run -- init

# 生成网站
cargo run -- generate

# 启动服务器
./serve.sh
</code></pre>
<h2>技术栈</h2>
<ul>
<li><strong>Rust</strong> - 主程序</li>
<li><strong>Tera</strong> - 模板引擎</li>
<li><strong>pulldown-cmark</strong> - Markdown解析</li>
<li><strong>RSS</strong> - 订阅源生成</li>
</ul>
<p>现在你的博客可以被任何人通过浏览器访问了！</p>
]]></description><author>Developer</author><guid isPermaLink="false">QmcBX5fvT3v6KjjKUmD2DK7NX81G4EKito1rNNEFs2papD</guid><pubDate>Mon, 21 Jul 2025 00:14:28 +0000</pubDate></item><item><title>Real IPFS Storage Test</title><link>https://Anonymous.github.io/kpgb/posts/real-ipfs-storage-test.html</link><description><![CDATA[<h1>真正的IPFS存储测试</h1>
<p>这篇文章将被存储在IPFS网络上！</p>
<h2>IPFS的优势</h2>
<ul>
<li><strong>去中心化</strong>: 内容分布在整个网络</li>
<li><strong>不可篡改</strong>: 内容通过哈希验证</li>
<li><strong>永久性</strong>: 只要有节点pin住内容，就永远存在</li>
</ul>
<p>创建时间: 2025-01-20</p>
]]></description><author>Bob</author><guid isPermaLink="false">QmQmWyC1JXi269pT6J6Jnip9mP5aWHcquDfd7DFCjAYFo2</guid><pubDate>Sun, 20 Jul 2025 23:51:27 +0000</pubDate></item></channel></rss>